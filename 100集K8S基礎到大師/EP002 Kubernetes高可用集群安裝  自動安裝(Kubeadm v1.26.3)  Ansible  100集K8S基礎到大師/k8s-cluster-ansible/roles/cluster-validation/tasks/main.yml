---
# 基礎集群狀態檢查
- name: Check cluster health
  block:
    - name: Wait for all nodes to be ready
      kubernetes.core.k8s_info:
        kind: Node
        wait: yes
        wait_timeout: "{{ validation_config.wait_timeout }}"
        wait_condition:
          type: Ready
          status: "True"
      register: nodes_status
      until: nodes_status.resources | length == (k8s_master_nodes | length + k8s_worker_nodes | length)
      retries: "{{ validation_config.retries }}"
      delay: "{{ validation_config.delay }}"

    - name: Display nodes status
      debug:
        msg: "Node {{ item.metadata.name }} is {{ item.status.conditions | json_query('[?type==`Ready`].status[]') | first }} with roles {{ item.metadata.labels['kubernetes.io/role'] | default('worker') }}"
      loop: "{{ nodes_status.resources }}"

    - name: Check control plane component status
      shell: kubectl get componentstatuses
      register: component_status
      changed_when: false

    - name: Display control plane status
      debug:
        var: component_status.stdout_lines

    - name: Verify cluster version
      command: kubectl version --short
      register: version_info
      changed_when: false

    - name: Display version information
      debug:
        var: version_info.stdout_lines

# 網路連通性測試
- name: Test network connectivity
  block:
    - name: Create test namespace
      kubernetes.core.k8s:
        name: "{{ validation_config.test_namespace }}"
        kind: Namespace
        state: present

    - name: Deploy test nginx pod
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            name: "{{ validation_config.test_pod_name }}"
            namespace: "{{ validation_config.test_namespace }}"
            labels:
              app: nginx-test
          spec:
            containers:
            - name: nginx
              image: "{{ validation_config.test_image }}"
              ports:
              - containerPort: 80

    - name: Wait for test pod to be ready
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ validation_config.test_namespace }}"
        name: "{{ validation_config.test_pod_name }}"
        wait: yes
        wait_timeout: "{{ validation_config.wait_timeout }}"
        wait_condition:
          type: Ready
          status: "True"
      register: test_pod

    - name: Deploy test service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ validation_config.test_service_name }}"
            namespace: "{{ validation_config.test_namespace }}"
          spec:
            selector:
              app: nginx-test
            ports:
            - port: 80
              targetPort: 80
            type: ClusterIP

# DNS 解析測試
- name: Test DNS resolution
  block:
    - name: Deploy DNS test pod
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            name: "{{ validation_config.dns_test_pod_name }}"
            namespace: "{{ validation_config.test_namespace }}"
          spec:
            containers:
            - name: dns-test
              image: "{{ validation_config.dns_test_image }}"
              command:
                - sleep
                - "3600"

    - name: Wait for DNS test pod to be ready
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ validation_config.test_namespace }}"
        name: "{{ validation_config.dns_test_pod_name }}"
        wait: yes
        wait_timeout: "{{ validation_config.wait_timeout }}"

    - name: Test internal DNS resolution
      command: >
        kubectl exec -n {{ validation_config.test_namespace }} {{ validation_config.dns_test_pod_name }} --
        nslookup kubernetes.default.svc.cluster.local
      register: dns_test
      retries: "{{ validation_config.retries }}"
      delay: "{{ validation_config.delay }}"
      until: dns_test.rc == 0
      changed_when: false

# 儲存測試（如果有配置儲存類別）
- name: Test storage (if configured)
  block:
    - name: Check default storage class
      command: kubectl get storageclass
      register: storage_class
      changed_when: false
      failed_when: false

    - name: Display storage class information
      debug:
        var: storage_class.stdout_lines
      when: storage_class.stdout != ""

# 負載均衡器測試
- name: Test load balancer
  block:
    - name: Check API server through load balancer
      uri:
        url: "https://{{ k8s_lb.vip }}:{{ k8s_lb.port }}/healthz"
        validate_certs: no
      register: lb_test
      retries: "{{ validation_config.retries }}"
      delay: "{{ validation_config.delay }}"
      until: lb_test.status == 200
      failed_when: false

    - name: Display load balancer test results
      debug:
        msg: "Load balancer health check: {{ 'SUCCESS' if lb_test.status == 200 else 'FAILED' }}"

# 清理測試資源
- name: Cleanup test resources
  block:
    - name: Remove test namespace
      kubernetes.core.k8s:
        name: "{{ validation_config.test_namespace }}"
        kind: Namespace
        state: absent
        wait: yes
      when: validation_config.cleanup_test_resources | bool
  always:
    - name: Generate validation report
      template:
        src: validation-report.j2
        dest: "{{ validation_config.report_path }}/cluster-validation-report-{{ ansible_date_time.date }}.txt"
